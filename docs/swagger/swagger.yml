openapi: 3.0.3
servers:
  - url: http://localhost:8080
info:
  title: Microblog API
  version: 0.0.1
  description: The main responsability of the Microblog API is to allow users to create posts, follow each other, watch what the followed users have posted.
tags:
  - name: User
    description: Operating over user entity
  - name: Followed
    description: Operating over followed entity
  - name: Tweet
    description: Operating over tweet entity
paths:
  /users:
    post:
      tags:
        - User
      summary: Create a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreationCommand'
      responses:
        '201':
          description: Created a user entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
        '400':
          description: Bad Request
  /users/{id}:
    get:
      tags:
        - User
      summary: Get a user entity
      responses:
        '200':
          description: Get a user entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserCreated'
        '400':
          description: Bad Request
  /followed:
    post:
      tags: 
        - Followed
      summary: Create a following
      requestBody:
        description: Followed creation command
        required: true
        content:
          application/json:
            schema: 
              $ref: '#/components/schemas/FollowedCreationCommand'
      responses:
        '201':
          description: Created followed entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedCreated'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    get:
      tags:
        - Followed
      summary: Search followed
      parameters:
        - in: query
          name: user_id
          description: The user who follows
          schema:
            type: integer
          required: false
        - in: query
          name: followed_user_id
          description: The user who is followed
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: Get followed entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedSearch'
  /followed/{id}:
    get:
      tags:
        - Followed
      summary: Get an existing followed entity
      responses:
        '200':
          description: Get followed entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedCreated'
        '400':
          description: Bad Request
        '404':
          description: Not Found
    patch:
      tags:
        - Followed
      summary: Modify the followed's enabled field
      requestBody:
        description: Followed modify command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowedPatchCommand'
      responses:
        '200':
          description: Modified followed entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FollowedCreated'
        '400': 
          description: Bad Request
        '404': 
          description: Not Found
  /tweets:
    post:
      tags:
        - Tweet
      summary: Create a tweet
      requestBody:
        description: Tweet creation command
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TweetCreationCommand'
      responses:
        '201':
          description: Tweet created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetCreated'
        '400':
          description: Bad Request
    get:
      tags:
        - Tweet
      summary: Search existing tweets
      parameters:
        - in: query
          name: user_id
          description: The user who follows
          schema:
            type: integer
          required: true
        - in: query
          name: offset
          description: Number of results to skip for paggination
          schema:
            type: integer
          required: false
        - in: query
          name: limit
          description: Maximum number of results to return
          schema:
            type: integer
          required: false
      responses:
        '200':
          description: Get tweet entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetsSearched'
        '400':
          description: Bad Request
  /tweets/{id}:
    get: 
      tags:
        - Tweet
      summary: Search existing tweets
      responses:
        '200':
          description: Get tweet entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TweetCreated'
        '400':
          description: Bad Request
        '404':
          description: NotFound
        


components:
  schemas:
    UserCreationCommand:
      type: object
      properties:
        id:
          type: integer
          example: 1234
        nick_name:
          type: string
          example: mynickname
    UserCreated:
      type: object
      properties:
        id:
          type: integer
          example: 1234
        nick_name:
          type: string
          example: mynickname
        created_at:
          type: string
          example: "2025-06-21T08:52:14.524903-03:00"
    FollowedCreationCommand:
      type: object
      properties:
        user_id:
          type: integer
          example: 1234
        followed_user_id:
          type: integer
          example: 5678
    FollowedCreated:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1234
        followed_user_id: 
          type: integer 
          example: 5678
        enabled:
          type: boolean
          example: true
        created_at:
          type: string
          example: "2025-06-21T08:52:14.524903-03:00"
        updated_at:
          type: string
          example: "2025-06-21T08:52:14.524903-03:00"
    FollowedPatchCommand:
      type: object
      properties:
        enabled:
          type: boolean
          example: false
    FollowedSearch:
      type: object
      properties:
        total:
          type: integer
          example: 1
        followed:
          type: array
          items:
            $ref: '#/components/schemas/FollowedCreated'
    TweetCreationCommand:
      type: object
      properties:
        user_id:
          type: integer
          example: 1234
        'post':
          type: string
          example: This is my post
    TweetCreated:
      type: object
      properties:
        id:
          type: integer
          example: 7
        user_id:
          type: integer
          example: 1234
        'post':
          type: string
          example: This is my post
        created_at:
          type: string
          example: "2025-06-21T15:54:34.044666-03:00"
    TweetsSearched:
      type: object
      properties:
        paging:
          type: object
          properties:
            total:
              type: integer
              example: 1
            limit:
              type: integer
              example: 10
            offset:
              type: integer
              example: 0
        results:
          type: array
          items:
            $ref: '#/components/schemas/TweetCreated'