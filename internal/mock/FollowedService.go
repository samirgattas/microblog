// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/samirgattas/microblog/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFollowedService creates a new instance of MockFollowedService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowedService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowedService {
	mock := &MockFollowedService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFollowedService is an autogenerated mock type for the FollowedService type
type MockFollowedService struct {
	mock.Mock
}

type MockFollowedService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowedService) EXPECT() *MockFollowedService_Expecter {
	return &MockFollowedService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockFollowedService
func (_mock *MockFollowedService) Create(ctx context.Context, followed *domain.Followed) error {
	ret := _mock.Called(ctx, followed)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Followed) error); ok {
		r0 = returnFunc(ctx, followed)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFollowedService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockFollowedService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - followed *domain.Followed
func (_e *MockFollowedService_Expecter) Create(ctx interface{}, followed interface{}) *MockFollowedService_Create_Call {
	return &MockFollowedService_Create_Call{Call: _e.mock.On("Create", ctx, followed)}
}

func (_c *MockFollowedService_Create_Call) Run(run func(ctx context.Context, followed *domain.Followed)) *MockFollowedService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Followed
		if args[1] != nil {
			arg1 = args[1].(*domain.Followed)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFollowedService_Create_Call) Return(err error) *MockFollowedService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFollowedService_Create_Call) RunAndReturn(run func(ctx context.Context, followed *domain.Followed) error) *MockFollowedService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function for the type MockFollowedService
func (_mock *MockFollowedService) Get(ctx context.Context, followedID int64) (*domain.Followed, error) {
	ret := _mock.Called(ctx, followedID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Followed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*domain.Followed, error)); ok {
		return returnFunc(ctx, followedID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *domain.Followed); ok {
		r0 = returnFunc(ctx, followedID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Followed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, followedID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFollowedService_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFollowedService_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - followedID int64
func (_e *MockFollowedService_Expecter) Get(ctx interface{}, followedID interface{}) *MockFollowedService_Get_Call {
	return &MockFollowedService_Get_Call{Call: _e.mock.On("Get", ctx, followedID)}
}

func (_c *MockFollowedService_Get_Call) Run(run func(ctx context.Context, followedID int64)) *MockFollowedService_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFollowedService_Get_Call) Return(followed *domain.Followed, err error) *MockFollowedService_Get_Call {
	_c.Call.Return(followed, err)
	return _c
}

func (_c *MockFollowedService_Get_Call) RunAndReturn(run func(ctx context.Context, followedID int64) (*domain.Followed, error)) *MockFollowedService_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockFollowedService
func (_mock *MockFollowedService) Search(ctx context.Context, followerUserID *int64, followedUserID *int64) ([]domain.Followed, error) {
	ret := _mock.Called(ctx, followerUserID, followedUserID)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.Followed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64) ([]domain.Followed, error)); ok {
		return returnFunc(ctx, followerUserID, followedUserID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64) []domain.Followed); ok {
		r0 = returnFunc(ctx, followerUserID, followedUserID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Followed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64) error); ok {
		r1 = returnFunc(ctx, followerUserID, followedUserID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFollowedService_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockFollowedService_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - followerUserID *int64
//   - followedUserID *int64
func (_e *MockFollowedService_Expecter) Search(ctx interface{}, followerUserID interface{}, followedUserID interface{}) *MockFollowedService_Search_Call {
	return &MockFollowedService_Search_Call{Call: _e.mock.On("Search", ctx, followerUserID, followedUserID)}
}

func (_c *MockFollowedService_Search_Call) Run(run func(ctx context.Context, followerUserID *int64, followedUserID *int64)) *MockFollowedService_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFollowedService_Search_Call) Return(followeds []domain.Followed, err error) *MockFollowedService_Search_Call {
	_c.Call.Return(followeds, err)
	return _c
}

func (_c *MockFollowedService_Search_Call) RunAndReturn(run func(ctx context.Context, followerUserID *int64, followedUserID *int64) ([]domain.Followed, error)) *MockFollowedService_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFollowedService
func (_mock *MockFollowedService) Update(ctx context.Context, followedID int64, followedPatchCmd *domain.FollowedPatchCommand) (*domain.Followed, error) {
	ret := _mock.Called(ctx, followedID, followedPatchCmd)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Followed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *domain.FollowedPatchCommand) (*domain.Followed, error)); ok {
		return returnFunc(ctx, followedID, followedPatchCmd)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, *domain.FollowedPatchCommand) *domain.Followed); ok {
		r0 = returnFunc(ctx, followedID, followedPatchCmd)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Followed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, *domain.FollowedPatchCommand) error); ok {
		r1 = returnFunc(ctx, followedID, followedPatchCmd)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFollowedService_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFollowedService_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - followedID int64
//   - followedPatchCmd *domain.FollowedPatchCommand
func (_e *MockFollowedService_Expecter) Update(ctx interface{}, followedID interface{}, followedPatchCmd interface{}) *MockFollowedService_Update_Call {
	return &MockFollowedService_Update_Call{Call: _e.mock.On("Update", ctx, followedID, followedPatchCmd)}
}

func (_c *MockFollowedService_Update_Call) Run(run func(ctx context.Context, followedID int64, followedPatchCmd *domain.FollowedPatchCommand)) *MockFollowedService_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 *domain.FollowedPatchCommand
		if args[2] != nil {
			arg2 = args[2].(*domain.FollowedPatchCommand)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFollowedService_Update_Call) Return(followed *domain.Followed, err error) *MockFollowedService_Update_Call {
	_c.Call.Return(followed, err)
	return _c
}

func (_c *MockFollowedService_Update_Call) RunAndReturn(run func(ctx context.Context, followedID int64, followedPatchCmd *domain.FollowedPatchCommand) (*domain.Followed, error)) *MockFollowedService_Update_Call {
	_c.Call.Return(run)
	return _c
}
