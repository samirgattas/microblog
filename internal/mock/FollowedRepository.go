// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/samirgattas/microblog/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFollowedRepository creates a new instance of MockFollowedRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFollowedRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFollowedRepository {
	mock := &MockFollowedRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFollowedRepository is an autogenerated mock type for the FollowedRepository type
type MockFollowedRepository struct {
	mock.Mock
}

type MockFollowedRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFollowedRepository) EXPECT() *MockFollowedRepository_Expecter {
	return &MockFollowedRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockFollowedRepository
func (_mock *MockFollowedRepository) Get(context1 context.Context, n int64) (*domain.Followed, error) {
	ret := _mock.Called(context1, n)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Followed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*domain.Followed, error)); ok {
		return returnFunc(context1, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *domain.Followed); ok {
		r0 = returnFunc(context1, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Followed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(context1, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFollowedRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockFollowedRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
func (_e *MockFollowedRepository_Expecter) Get(context1 interface{}, n interface{}) *MockFollowedRepository_Get_Call {
	return &MockFollowedRepository_Get_Call{Call: _e.mock.On("Get", context1, n)}
}

func (_c *MockFollowedRepository_Get_Call) Run(run func(context1 context.Context, n int64)) *MockFollowedRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFollowedRepository_Get_Call) Return(followed *domain.Followed, err error) *MockFollowedRepository_Get_Call {
	_c.Call.Return(followed, err)
	return _c
}

func (_c *MockFollowedRepository_Get_Call) RunAndReturn(run func(context1 context.Context, n int64) (*domain.Followed, error)) *MockFollowedRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockFollowedRepository
func (_mock *MockFollowedRepository) Save(context1 context.Context, followed *domain.Followed) error {
	ret := _mock.Called(context1, followed)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Followed) error); ok {
		r0 = returnFunc(context1, followed)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFollowedRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockFollowedRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - context1 context.Context
//   - followed *domain.Followed
func (_e *MockFollowedRepository_Expecter) Save(context1 interface{}, followed interface{}) *MockFollowedRepository_Save_Call {
	return &MockFollowedRepository_Save_Call{Call: _e.mock.On("Save", context1, followed)}
}

func (_c *MockFollowedRepository_Save_Call) Run(run func(context1 context.Context, followed *domain.Followed)) *MockFollowedRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Followed
		if args[1] != nil {
			arg1 = args[1].(*domain.Followed)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFollowedRepository_Save_Call) Return(err error) *MockFollowedRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFollowedRepository_Save_Call) RunAndReturn(run func(context1 context.Context, followed *domain.Followed) error) *MockFollowedRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByUserIDAndFollowedUserID provides a mock function for the type MockFollowedRepository
func (_mock *MockFollowedRepository) SearchByUserIDAndFollowedUserID(context1 context.Context, n *int64, n1 *int64) ([]domain.Followed, error) {
	ret := _mock.Called(context1, n, n1)

	if len(ret) == 0 {
		panic("no return value specified for SearchByUserIDAndFollowedUserID")
	}

	var r0 []domain.Followed
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64) ([]domain.Followed, error)); ok {
		return returnFunc(context1, n, n1)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *int64, *int64) []domain.Followed); ok {
		r0 = returnFunc(context1, n, n1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Followed)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *int64, *int64) error); ok {
		r1 = returnFunc(context1, n, n1)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByUserIDAndFollowedUserID'
type MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call struct {
	*mock.Call
}

// SearchByUserIDAndFollowedUserID is a helper method to define mock.On call
//   - context1 context.Context
//   - n *int64
//   - n1 *int64
func (_e *MockFollowedRepository_Expecter) SearchByUserIDAndFollowedUserID(context1 interface{}, n interface{}, n1 interface{}) *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call {
	return &MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call{Call: _e.mock.On("SearchByUserIDAndFollowedUserID", context1, n, n1)}
}

func (_c *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call) Run(run func(context1 context.Context, n *int64, n1 *int64)) *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *int64
		if args[1] != nil {
			arg1 = args[1].(*int64)
		}
		var arg2 *int64
		if args[2] != nil {
			arg2 = args[2].(*int64)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call) Return(followeds []domain.Followed, err error) *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call {
	_c.Call.Return(followeds, err)
	return _c
}

func (_c *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call) RunAndReturn(run func(context1 context.Context, n *int64, n1 *int64) ([]domain.Followed, error)) *MockFollowedRepository_SearchByUserIDAndFollowedUserID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function for the type MockFollowedRepository
func (_mock *MockFollowedRepository) Update(context1 context.Context, followed *domain.Followed) error {
	ret := _mock.Called(context1, followed)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Followed) error); ok {
		r0 = returnFunc(context1, followed)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFollowedRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockFollowedRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - context1 context.Context
//   - followed *domain.Followed
func (_e *MockFollowedRepository_Expecter) Update(context1 interface{}, followed interface{}) *MockFollowedRepository_Update_Call {
	return &MockFollowedRepository_Update_Call{Call: _e.mock.On("Update", context1, followed)}
}

func (_c *MockFollowedRepository_Update_Call) Run(run func(context1 context.Context, followed *domain.Followed)) *MockFollowedRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Followed
		if args[1] != nil {
			arg1 = args[1].(*domain.Followed)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFollowedRepository_Update_Call) Return(err error) *MockFollowedRepository_Update_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFollowedRepository_Update_Call) RunAndReturn(run func(context1 context.Context, followed *domain.Followed) error) *MockFollowedRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}
