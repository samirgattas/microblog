// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/samirgattas/microblog/internal/core/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockTweetRepository creates a new instance of MockTweetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTweetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTweetRepository {
	mock := &MockTweetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockTweetRepository is an autogenerated mock type for the TweetRepository type
type MockTweetRepository struct {
	mock.Mock
}

type MockTweetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTweetRepository) EXPECT() *MockTweetRepository_Expecter {
	return &MockTweetRepository_Expecter{mock: &_m.Mock}
}

// Get provides a mock function for the type MockTweetRepository
func (_mock *MockTweetRepository) Get(context1 context.Context, n int64) (*domain.Tweet, error) {
	ret := _mock.Called(context1, n)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *domain.Tweet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*domain.Tweet, error)); ok {
		return returnFunc(context1, n)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *domain.Tweet); ok {
		r0 = returnFunc(context1, n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tweet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(context1, n)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTweetRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockTweetRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - context1 context.Context
//   - n int64
func (_e *MockTweetRepository_Expecter) Get(context1 interface{}, n interface{}) *MockTweetRepository_Get_Call {
	return &MockTweetRepository_Get_Call{Call: _e.mock.On("Get", context1, n)}
}

func (_c *MockTweetRepository_Get_Call) Run(run func(context1 context.Context, n int64)) *MockTweetRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTweetRepository_Get_Call) Return(tweet *domain.Tweet, err error) *MockTweetRepository_Get_Call {
	_c.Call.Return(tweet, err)
	return _c
}

func (_c *MockTweetRepository_Get_Call) RunAndReturn(run func(context1 context.Context, n int64) (*domain.Tweet, error)) *MockTweetRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function for the type MockTweetRepository
func (_mock *MockTweetRepository) Save(context1 context.Context, tweet *domain.Tweet) error {
	ret := _mock.Called(context1, tweet)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *domain.Tweet) error); ok {
		r0 = returnFunc(context1, tweet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockTweetRepository_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockTweetRepository_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - context1 context.Context
//   - tweet *domain.Tweet
func (_e *MockTweetRepository_Expecter) Save(context1 interface{}, tweet interface{}) *MockTweetRepository_Save_Call {
	return &MockTweetRepository_Save_Call{Call: _e.mock.On("Save", context1, tweet)}
}

func (_c *MockTweetRepository_Save_Call) Run(run func(context1 context.Context, tweet *domain.Tweet)) *MockTweetRepository_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *domain.Tweet
		if args[1] != nil {
			arg1 = args[1].(*domain.Tweet)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTweetRepository_Save_Call) Return(err error) *MockTweetRepository_Save_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockTweetRepository_Save_Call) RunAndReturn(run func(context1 context.Context, tweet *domain.Tweet) error) *MockTweetRepository_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function for the type MockTweetRepository
func (_mock *MockTweetRepository) Search(context1 context.Context, tweetSearchParams domain.TweetSearchParams) (domain.TweetsSearchResult, error) {
	ret := _mock.Called(context1, tweetSearchParams)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 domain.TweetsSearchResult
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TweetSearchParams) (domain.TweetsSearchResult, error)); ok {
		return returnFunc(context1, tweetSearchParams)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, domain.TweetSearchParams) domain.TweetsSearchResult); ok {
		r0 = returnFunc(context1, tweetSearchParams)
	} else {
		r0 = ret.Get(0).(domain.TweetsSearchResult)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, domain.TweetSearchParams) error); ok {
		r1 = returnFunc(context1, tweetSearchParams)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockTweetRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type MockTweetRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - context1 context.Context
//   - tweetSearchParams domain.TweetSearchParams
func (_e *MockTweetRepository_Expecter) Search(context1 interface{}, tweetSearchParams interface{}) *MockTweetRepository_Search_Call {
	return &MockTweetRepository_Search_Call{Call: _e.mock.On("Search", context1, tweetSearchParams)}
}

func (_c *MockTweetRepository_Search_Call) Run(run func(context1 context.Context, tweetSearchParams domain.TweetSearchParams)) *MockTweetRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 domain.TweetSearchParams
		if args[1] != nil {
			arg1 = args[1].(domain.TweetSearchParams)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockTweetRepository_Search_Call) Return(tweetsSearchResult domain.TweetsSearchResult, err error) *MockTweetRepository_Search_Call {
	_c.Call.Return(tweetsSearchResult, err)
	return _c
}

func (_c *MockTweetRepository_Search_Call) RunAndReturn(run func(context1 context.Context, tweetSearchParams domain.TweetSearchParams) (domain.TweetsSearchResult, error)) *MockTweetRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}
